@page  "/movie/{MovieId:int}"
@page  "/movie/{MovieId:int}/{MovieName}"
@inject IMovieRepository movieRepository
@inject IRatingRepository ratingRepository
@inject IDisplayMessage displayMessage

@if (model == null)
{
    <text>Loading...</text>
}
else
{
    <h2>@model.Movie.Title (@model.Movie.ReleaseDate.Value.ToString("yyyy"))</h2>
    for (int i = 0; i < model.Genres.Count; i++)
    {
        @linkGenre(model.Genres[i])

        if (i < model.Genres.Count - 1)
        {
            <text>, </text>
        }
    }
    <text> | </text> <span>@model.Movie.ReleaseDate.Value.ToString("dd MMM yyyy")</span>
    <text> | Average: </text> @model.AverageVote.ToString("0.#") <text>/5 | Your vote: </text>
    <Rating MaximumRating="5" SelectedRating="model.UserVote" OnVote="OnVote" />

    <div style="display:flex">
        <span style="display: inline-block; margin-right: 5px;">
            <img src="@model.Movie.Poster" style="width: 225px; height: 315px;" />
        </span>
        <iframe width="560" height="315" src="https://www.youtube.com/embed/@model.Movie.Trailer" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
    </div>
    <div style="margin-top: 10px">
        <h3>Summary</h3>
        <div>
            <RenderMarkdown MarkdownContent="@model.Movie.Summary" />
        </div>
    </div>
    <div style="margin-top: 10px">
        <h3>Actors</h3>
        <div style="display: flex; flex-direction: column;">
            @foreach (var actor in model.Actors)
            {
                <div style="margin-bottom: 2px">
                    <img style="width: 50px;" src="@actor.Picture" />
                    <span style="display: inline-block; width: 200px;">
                        <a href="/person/@actor.Id">@actor.Name</a>
                    </span>
                    <span style="display: inline-block; width: 45px;">...</span>
                    <span>@actor.Character</span>
                </div>
            }
        </div>
    </div>
    @if (model.Theaters.Any())
    {
        <div style="margin-top: 10px">
            <h3>In Theaters</h3>
            <div style="display: flex; flex-direction: column;">
                @foreach (var theater in model.Theaters)
                {
                    <div style="margin-bottom: 2px">
                        <span style="display: inline-block; width: 200px;">
                            <a href="/theater/@theater.Id">@theater.Name</a>
                        </span>
                        <span style="display: inline-block; width: 45px;">...</span>
                        <span>@theater.Address</span>
                    </div>
                }
            </div>
        </div>
    }
}

@code {

    private MovieDetailsDTO model;
    private RenderFragment<Genre> linkGenre = (genre) =>@<a href="movies/search?genreId=@genre.Id">@genre.Name</a>;

    [Parameter] public int MovieId { get; set; }
    [Parameter] public string MovieName { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            model = await movieRepository.GetMovieDetailsDTO(MovieId);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private async Task OnVote(int selectedRate)
    {
        model.UserVote = selectedRate;
        var movieRating = new MovieRating() { Rate = selectedRate, MovieId = MovieId };
        await ratingRepository.Vote(movieRating);

        await displayMessage.DisplaySuccessMessage("Your vote have been received"!);
    }
}
